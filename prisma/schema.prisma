// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Brand {
  id    String @id @default(cuid())
  title String @unique
  //   description String?
  //   logo        String?

  products Product[]
}

model Cart {
  user   User       @relation(fields: [userId], references: [id])
  userId String     @id
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [userId])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int

  @@unique([cartId, productId], name: "UniqueCartItem")
}

model Visited{
  id String @id @default(cuid())
  user   User @relation(fields: [userId], references: [id])
  userId String  @unique
  products Product[]
  
  createdAt DateTime @default(now())
  
}




model Product {
  id          String  @id @default(cuid())
  title       String
  description String?
  images      String
  //   keywords    String[]

  price Float @default(100)
  //   discount Float @default(0)
  //   stock    Int   @default(0)

  //   orders         OrderItem[]
  cartItems CartItem[]
  wishlists User[]     @relation("Wishlist")
  //   productReviews ProductReview[]

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String

  categories Category[]
  visited Visited[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandId])
}

model Category {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?

  products Product[]
  //   banners  Banner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// t3 default 
model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  visited       Visited?

  cart     Cart?
  wishlist Product[] @relation("Wishlist")
  fittingPicture FittingPicture?

}

model FittingPicture {
  id          String  @id @default(cuid())
  image      String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


